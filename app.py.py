# -*- coding: utf-8 -*-
"""Untitled17.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tDzNdRpozBBVb0Z5rUlfGrQH_Cim671c
"""

pip install streamlit

import pandas as pd
import streamlit as st
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.ensemble import RandomForestClassifier
from xgboost import XGBClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, classification_report
from imblearn.over_sampling import RandomOverSampler

# Load the data from the local file
file_path = "Downloads/sfari_genes.csv"  # Update with the correct path to your file
genes = pd.read_csv(file_path)

# Drop unnecessary columns
columns_to_drop = ['status', 'chromosome', 'number-of-reports', 'gene-name', 'ensembl-id', 'gene-score', 'genetic-category']
genes = genes.drop(columns=columns_to_drop)

# Encode gene symbols as dummy variables
genes_encoded = pd.get_dummies(genes, columns=['gene-symbol'])

# Features (X) excluding the 'syndromic' column
X = genes_encoded.drop(columns='syndromic')

# Labels (y)
y = genes_encoded['syndromic']

# Convert to binary classification (1 for syndromic, 0 for non-syndromic)
y_binary = (y == 1).astype(int)

# Resample the dataset
ros = RandomOverSampler(random_state=42)
X_resampled, y_resampled = ros.fit_resample(X, y_binary)

# Split the resampled data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Initialize the classifier
classifiers = {
    'XGBoost': XGBClassifier(),
    'SVM': SVC(),
    'Random Forest': RandomForestClassifier()
}

# Train and evaluate each classifier on the resampled data
for clf_name, clf in classifiers.items():
    # Train the classifier
    clf.fit(X_train, y_train)

# Streamlit App
st.title("Autism Gene Classifier")

# Sidebar Input
gene_symbol = st.sidebar.text_input("Enter a gene symbol:")

# Check if the gene symbol exists in the data
if gene_symbol in genes['gene-symbol'].values:
    # Extract the corresponding row from the dataframe
    gene_info = genes[genes['gene-symbol'].astype(str) == gene_symbol]

    # Check if the gene is syndromic or not
    if gene_info['syndromic'].values[0] == 1:
        st.success(f"The gene {gene_symbol} is associated with autism.")
    else:
        st.info(f"The gene {gene_symbol} is not associated with autism.")
else:
    st.warning("The gene symbol does not exist in the data.")

# Print autism syndromic genes
st.subheader("Autism Syndromic Genes:")
st.write(genes[['gene-symbol', 'syndromic']])

